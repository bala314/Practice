[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\b0p03a0\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\b0p03a0\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 1.8.0_25)
[debug]       Load.loadUnit: plugins took 218.826ms
[debug]       Load.loadUnit: defsScala took 0.479ms
[debug] [Loading] Scanning directory C:\Users\b0p03a0\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\b0p03a0\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 27.8313 ms
[debug]           Load.resolveProject(global-plugins) took 93.4334ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\b0p03a0\.sbt\1.0\plugins, plugins: List(<none>))) took 163.054ms
[debug] [Loading] Done in C:\Users\b0p03a0\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 202.2795ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3868ms
[debug]     Load.loadUnit(file:/C:/Users/b0p03a0/.sbt/1.0/plugins/, ...) took 435.8307ms
[debug]   Load.apply: load took 785.8098ms
[debug]   Load.apply: resolveProjects took 11.027ms
[debug]   Load.apply: finalTransforms took 103.2043ms
[debug]   Load.apply: config.delegates took 12.7157ms
[debug]   Load.apply: Def.make(settings)... took 871.4441ms
[debug]   Load.apply: structureIndex took 172.3964ms
[debug]   Load.apply: mkStreams took 3.6119ms
[info] loading global plugins from C:\Users\b0p03a0\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 5527.6057ms
[debug]           Load.loadUnit: plugins took 128.0547ms
[debug]           Load.loadUnit: defsScala took 0.0064ms
[debug] [Loading] Scanning directory C:\Users\b0p03a0\IdeaProjects\Practice\project
[debug]             Load.loadUnit: mkEval took 21.1867ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\b0p03a0\IdeaProjects\Practice\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.7309 ms
[info] loading settings for project practice-build from idea.sbt ...
[debug]               Load.resolveProject(practice-build) took 6.6681ms
[debug]             Load.loadTransitive: finalizeProject(Project(id practice-build, base: C:\Users\b0p03a0\IdeaProjects\Practice\project, plugins: List(<none>))) took 11.7289ms
[debug] [Loading] Done in C:\Users\b0p03a0\IdeaProjects\Practice\project, returning: (practice-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 380.208ms
[debug]           Load.loadUnit: cleanEvalClasses took 18.529ms
[debug]         Load.loadUnit(file:/C:/Users/b0p03a0/IdeaProjects/Practice/project/, ...) took 530.4643ms
[debug]       Load.apply: load took 534.7258ms
[debug]       Load.apply: resolveProjects took 0.1811ms
[debug]       Load.apply: finalTransforms took 17.5258ms
[debug]       Load.apply: config.delegates took 0.6196ms
[debug]       Load.apply: Def.make(settings)... took 124.5789ms
[debug]       Load.apply: structureIndex took 53.6987ms
[debug]       Load.apply: mkStreams took 0.0035ms
[info] loading project definition from C:\Users\b0p03a0\IdeaProjects\Practice\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 1516.0299ms
[debug]     Load.loadUnit: defsScala took 0.0052ms
[debug] [Loading] Scanning directory C:\Users\b0p03a0\IdeaProjects\Practice
[debug]       Load.loadUnit: mkEval took 1.0333ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\b0p03a0\IdeaProjects\Practice, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.9211 ms
[info] loading settings for project practice from build.sbt ...
[debug]         Load.resolveProject(practice) took 68.3518ms
[debug]       Load.loadTransitive: finalizeProject(Project(id practice, base: C:\Users\b0p03a0\IdeaProjects\Practice, plugins: List(<none>))) took 74.4461ms
[debug] [Loading] Done in C:\Users\b0p03a0\IdeaProjects\Practice, returning: (practice)
[debug]     Load.loadUnit: loadedProjectsRaw took 484.8408ms
[debug]     Load.loadUnit: cleanEvalClasses took 37.5089ms
[debug]   Load.loadUnit(file:/C:/Users/b0p03a0/IdeaProjects/Practice/, ...) took 2039.4147ms
[debug] Load.apply: load took 2043.8053ms
[debug] Load.apply: resolveProjects took 0.1401ms
[debug] Load.apply: finalTransforms took 46.4351ms
[debug] Load.apply: config.delegates took 0.5587ms
[debug] Load.apply: Def.make(settings)... took 103.7414ms
[debug] Load.apply: structureIndex took 41.2187ms
[debug] Load.apply: mkStreams took 0.0033ms
[info] set current project to Practice (in build file:/C:/Users/b0p03a0/IdeaProjects/Practice/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 51437 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 51437, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Practice (in build file:/C:/Users/b0p03a0/IdeaProjects/Practice/)
[debug] > Exec(idea-shell, None, None)
